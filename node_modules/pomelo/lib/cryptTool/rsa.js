var ursa                = require('ursa');
var encoding            = require('encoding');

var xml2js = require('xml2js');

var clientPublic        ;               //客户端公钥

var clientModulusBit    = 512;
var serverModulusBit    = 512;
var clientMaxBit        = clientModulusBit/8;
var serverMaxBit        = serverModulusBit/8;
var clientRealBit       = clientMaxBit - 11;
var serverRealBit       = serverMaxBit - 11;
var padding             = ursa.RSA_PKCS1_PADDING;

exports.setClientPubKey = function(clientKey){
    //console.error('clientKey: ' + clientKey);
    xml2js.parseString(clientKey, {explicitArray : false}, function(err, json){
        var pubKey = rsaPublicKeyPem(json.RSAKeyValue.Modulus, json.RSAKeyValue.Exponent);
        clientPublic = ursa.createPublicKey(pubKey, encoding.BASE64);
    });

};

//加密，使用客户端公钥加密
exports.clientEncrypt = function(plain){
    plain = plain || "";
    return encrypt(plain, clientPublic, clientRealBit, padding);
};


var rsaPublicKeyPem = function(modulus_b64, exponent_b64) {
    function prepadSigned(hexStr) {
        msb = hexStr[0]
        if (
            (msb>='8' && msb<='9') ||
            (msb>='a' && msb<='f') ||
            (msb>='A'&&msb<='F')) {
            return '00'+hexStr;
        } else {
            return hexStr;
        }
    }

    function toHex(number) {
        var nstr = number.toString(16);
        if (nstr.length%2==0) return nstr;
        return '0'+nstr;
    }

    // encode ASN.1 DER length field
    // if <=127, short form
    // if >=128, long form
    function encodeLengthHex(n) {
        if (n<=127) return toHex(n);
        else {
            n_hex = toHex(n);
            length_of_length_byte = 128 + n_hex.length/2; // 0x80+numbytes
            return toHex(length_of_length_byte)+n_hex;
        }
    }

    var modulus = new Buffer(modulus_b64,'base64');
    var exponent = new Buffer(exponent_b64, 'base64');

    var modulus_hex = modulus.toString('hex');
    var exponent_hex = exponent.toString('hex');

    modulus_hex = prepadSigned(modulus_hex);
    exponent_hex = prepadSigned(exponent_hex);

    var modlen = modulus_hex.length/2;
    var explen = exponent_hex.length/2;

    var encoded_modlen = encodeLengthHex(modlen);
    var encoded_explen = encodeLengthHex(explen);
    var encoded_pubkey = '30' +
        encodeLengthHex(
                modlen +
                explen +
                encoded_modlen.length/2 +
                encoded_explen.length/2 + 2
        ) +
        '02' + encoded_modlen + modulus_hex +
        '02' + encoded_explen + exponent_hex;

    var seq2 =
        '30 0d ' +
        '06 09 2a 86 48 86 f7 0d 01 01 01' +
        '05 00 ' +
        '03' + encodeLengthHex(encoded_pubkey.length/2 + 1) +
        '00' + encoded_pubkey;

    seq2 = seq2.replace(/ /g,'');

    var der_hex = '30' + encodeLengthHex(seq2.length/2) + seq2;

    der_hex = der_hex.replace(/ /g, '');

    var der = new Buffer(der_hex, 'hex');
    var der_b64 = der.toString('base64');

    var pem = '-----BEGIN PUBLIC KEY-----\n'
        + der_b64.match(/.{1,64}/g).join('\n')
        + '\n-----END PUBLIC KEY-----\n';

    return pem;
};

//用于获取内容的字节数
function bytes(text, coding) {
    if (typeof text === 'undefined') {
        throw new Error("must have a arg.");
    }

    coding = coding || 'utf8';
    return Buffer.byteLength(text.toString(), coding);
}

function encrypt(plain, publicKey, realBit, padding){
    var start1 = 0;
    var end1   = realBit;
    var result1 = '';
    var originBuff = new Buffer(plain);
    var originByte = bytes(plain, 'utf8');
    while(start1 < originByte){
        var originTmp  = originBuff.slice(start1, end1);
        result1 += publicKey.encrypt(originTmp, 'binary', 'binary', padding);
        start1 += realBit;
        end1 += realBit;
    }

    var encrypted =  encoding.convert(result1, 'binary', 'base64');

    return encrypted.toString();
}